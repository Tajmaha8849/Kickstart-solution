

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        
        temp=[]
        start,end=0,0
        flag=0
        for i in range(len(nums)):
            if target==nums[i]:
                start=i
                flag=1
                break
        if flag==0:
            temp.insert(0,-1)
        else:
            temp.append(start)
        flag1=0
        for j in range(len(nums)-1,-1,-1):
            if target==nums[j]:
                end=j
                flag1=1
                break
        if flag1==0:
            temp.insert(1,-1)
        else:
            temp.append(end)
            
        return temp
                
        
