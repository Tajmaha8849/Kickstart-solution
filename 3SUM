
3SUM
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        target = 0
        temp=[[nums[x],nums[y],nums[z]] for x in range(len(nums)) for y in range(len(nums)) for z in range(len(nums)) if x!=y!=z!=x]
        target=0
        arr=[]
        for row in temp:
            row.sort()
            if row not in arr:
                if target==sum(row):                        
                    arr.append(row)
            else:
                continue
        return arr
